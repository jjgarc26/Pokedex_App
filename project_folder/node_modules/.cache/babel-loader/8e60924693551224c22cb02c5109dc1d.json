{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mendo\\\\OneDrive\\\\Documents\\\\Programming\\\\ReactJS\\\\Pokedex_App\\\\project_folder\\\\src\\\\Components\\\\PokemonFullStats\\\\Stats\\\\PokemonSummary\\\\PokemonSummary.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { useIsFetching } from \"react-query\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PokemonSummary = props => {\n  _s();\n\n  let [summary, setSummary] = useState(\"\");\n  useIsFetching;\n\n  const readApi = async () => {\n    try {\n      let speciesData = await props.summary;\n      let summarytest = speciesData.flavor_text_entries[0].flavor_text;\n      setSummary(summarytest.replace(/(\\r\\n|\\n|\\r)/gm, \" \"));\n      console.log(summarytest);\n    } catch {\n      console.error(\"Could not read summary\");\n    }\n  };\n\n  const memorizedValue = useMemo(readApi, [summary]);\n  memorizedValue();\n  console.log(props.summary);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: summary = \"\" ? \"Loading\" : summary\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PokemonSummary, \"mttrpkn0pTHbUAODmvOXFoPBLNs=\");\n\n_c = PokemonSummary;\nexport default PokemonSummary;\n\nvar _c;\n\n$RefreshReg$(_c, \"PokemonSummary\");","map":{"version":3,"sources":["C:/Users/mendo/OneDrive/Documents/Programming/ReactJS/Pokedex_App/project_folder/src/Components/PokemonFullStats/Stats/PokemonSummary/PokemonSummary.jsx"],"names":["React","useState","useEffect","useMemo","useIsFetching","PokemonSummary","props","summary","setSummary","readApi","speciesData","summarytest","flavor_text_entries","flavor_text","replace","console","log","error","memorizedValue"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,OAArC,QAAoD,OAApD;AACA,SAASC,aAAT,QAA8B,aAA9B;;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AAChC,MAAI,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAApC;AACAG,EAAAA,aAAa;;AAEb,QAAMK,OAAO,GAAG,YAAY;AAC1B,QAAI;AACF,UAAIC,WAAW,GAAG,MAAMJ,KAAK,CAACC,OAA9B;AACA,UAAII,WAAW,GAAGD,WAAW,CAACE,mBAAZ,CAAgC,CAAhC,EAAmCC,WAArD;AAEAL,MAAAA,UAAU,CAACG,WAAW,CAACG,OAAZ,CAAoB,gBAApB,EAAsC,GAAtC,CAAD,CAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,WAAZ;AACD,KAND,CAME,MAAM;AACNI,MAAAA,OAAO,CAACE,KAAR,CAAc,wBAAd;AACD;AACF,GAVD;;AAWA,QAAMC,cAAc,GAAGf,OAAO,CAACM,OAAD,EAAU,CAACF,OAAD,CAAV,CAA9B;AACAW,EAAAA,cAAc;AAEdH,EAAAA,OAAO,CAACC,GAAR,CAAYV,KAAK,CAACC,OAAlB;AACA,sBAAO;AAAA,cAAOA,OAAO,GAAG,KAAK,SAAL,GAAiBA;AAAlC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CApBD;;GAAMF,c;;KAAAA,c;AAqBN,eAAeA,cAAf","sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useIsFetching } from \"react-query\";\r\n\r\nconst PokemonSummary = (props) => {\r\n  let [summary, setSummary] = useState(\"\");\r\n  useIsFetching\r\n\r\n  const readApi = async () => {\r\n    try {\r\n      let speciesData = await props.summary;\r\n      let summarytest = speciesData.flavor_text_entries[0].flavor_text;\r\n\r\n      setSummary(summarytest.replace(/(\\r\\n|\\n|\\r)/gm, \" \"));\r\n      console.log(summarytest);\r\n    } catch {\r\n      console.error(\"Could not read summary\");\r\n    }\r\n  };\r\n  const memorizedValue = useMemo(readApi, [summary]);\r\n  memorizedValue();\r\n\r\n  console.log(props.summary);\r\n  return <div>{(summary = \"\" ? \"Loading\" : summary)}</div>;\r\n};\r\nexport default PokemonSummary;\r\n"]},"metadata":{},"sourceType":"module"}